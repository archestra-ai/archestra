name: Linting and Tests

on:
  pull_request:
    branches:
      - main

concurrency:
  # Cancel any running workflow for the same branch when new commits are pushed.
  # We group both by ref_name (available when CI is triggered by a push to a branch/tag)
  # and head_ref (available when CI is triggered by a PR).
  group: "${{ github.ref_name }}-${{ github.head_ref }}"
  cancel-in-progress: true

jobs:
  # See here for more information
  # https://github.com/tauri-apps/tauri-action
  rust-linting-and-tests:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "ubuntu-latest"
            args: ""
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          - platform: "windows-latest"
            args: ""
    runs-on: ${{ matrix.platform }}
    name: Rust Linting and Tests (${{ matrix.platform }})
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          platform: ${{ matrix.platform }}

      - name: Check Rust formatting
        working-directory: desktop/src-tauri
        run: cargo fmt --check
        
      - name: Build tests (reduces clippy rebuilds)
        run: cargo test --no-run

      - name: Run Clippy Linting
        working-directory: desktop/src-tauri
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

      - name: Run tests
        working-directory: desktop/src-tauri
        run: cargo test

      # NOTE: use this once we want to start building the application binaries for Mac/Windows/Linux
      # - uses: tauri-apps/tauri-action@v0.5.22
      #   with:
      #     tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
      #     projectPath: desktop
      #     releaseName: "App v__VERSION__"
      #     releaseBody: "See the assets to download this version and install."
      #     releaseDraft: true
      #     prerelease: false
      #     args: ${{ matrix.args }}

  frontend-linting-and-tests:
    name: Frontend Linting and Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup frontend dependencies
        uses: ./.github/actions/setup-frontend

      - name: Check prettier formatting
        working-directory: desktop
        run: pnpm prettier --check .

      - name: Run tests
        working-directory: desktop
        run: pnpm test

      - name: Build
        working-directory: desktop
        run: pnpm build

  verify-openapi-schema-is-up-to-date:
    name: Verify Open API schema is up to date
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          platform: ubuntu-latest

      - name: Setup frontend dependencies
        uses: ./.github/actions/setup-frontend

      - name: Generate OpenAPI schema
        working-directory: desktop/src-tauri
        run: cargo run --bin dump_openapi

      - name: Generate TypeScript client
        working-directory: desktop
        run: pnpm codegen

      - name: Check for uncommitted changes
        working-directory: desktop
        run: |
          if ! git diff --exit-code; then
            echo "❌ OpenAPI schema or TypeScript client is out of date!"
            echo "Please run the following commands and commit the changes:"
            echo "  cd desktop/src-tauri && cargo run --bin dump_openapi"
            echo "  cd desktop && pnpm codegen"
            exit 1
          fi
          echo "✅ OpenAPI schema and TypeScript client are up to date"
