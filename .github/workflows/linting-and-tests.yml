name: Linting and Tests

on:
  pull_request:
    branches:
      - main

concurrency:
  # Cancel any running workflow for the same branch when new commits are pushed.
  # We group both by ref_name (available when CI is triggered by a push to a branch/tag)
  # and head_ref (available when CI is triggered by a PR).
  group: "${{ github.ref_name }}-${{ github.head_ref }}"
  cancel-in-progress: true

jobs:
  # See here for more information
  # https://github.com/tauri-apps/tauri-action
  rust-linting-and-tests:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "ubuntu-latest"
            args: ""
          # NOTE: uncomment these out once we want to start building the application binaries for Mac/Windows/Linux
          # - platform: "macos-latest" # for Arm based macs (M1 and above).
          #   args: "--target aarch64-apple-darwin"
          # - platform: "macos-latest" # for Intel based macs.
          #   args: "--target x86_64-apple-darwin"
          # - platform: "windows-latest"
          #   args: ""
    runs-on: ${{ matrix.platform }}
    name: Rust Linting and Tests (${{ matrix.platform }})
    steps:
      - uses: actions/checkout@v4

      # Cache the cargo registry to speed up the build
      # https://github.com/actions/cache/blob/main/examples.md#rust---cargo
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
          components: rustfmt,clippy

      - name: Install Ubuntu Dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Check Rust formatting
        working-directory: desktop/src-tauri
        run: cargo fmt --check

      - name: Run Clippy Linting
        working-directory: desktop/src-tauri
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        working-directory: desktop/src-tauri
        run: cargo test

      # NOTE: use this once we want to start building the application binaries for Mac/Windows/Linux
      # - uses: tauri-apps/tauri-action@v0.5.22
      #   with:
      #     tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
      #     projectPath: desktop
      #     releaseName: "App v__VERSION__"
      #     releaseBody: "See the assets to download this version and install."
      #     releaseDraft: true
      #     prerelease: false
      #     args: ${{ matrix.args }}

  frontend-linting-and-tests:
    name: Frontend Linting and Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24.4.1"
          cache: "pnpm"
          cache-dependency-path: desktop/pnpm-lock.yaml

      - name: Install dependencies
        working-directory: desktop
        run: pnpm install --frozen-lockfile

      - name: Check prettier formatting
        working-directory: desktop
        run: pnpm prettier --check .

      - name: Run tests
        working-directory: desktop
        run: pnpm test

      - name: Build
        working-directory: desktop
        run: pnpm build
